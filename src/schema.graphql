# import * from "./generated/prisma.graphql"
# directive @isAuthenticated on FIELD | FIELD_DEFINITION
# directive @hasRole(roles: [String]) on QUERY | FIELD | MUTATION

type Query {
  users(login: String): [User!]!
  # host(hostName:String!): Host
  hosts(hostName: String): [Host!]!
  # hostSettings(hostName: String!, password: String): String! # TODO: REST endpoint
  me: User
}

type Mutation {
  signup(login: String!, password: String!, name: String!): AuthPayload!
  signin(login: String!, password: String!): AuthPayload!
  upsertHost(hostName: String!, password: String, publicKey:String, timeZone:String): Host! # TODO: encrypt passowrd
  upsertUser(login: String!, password: String!, name: String!, role:Role): AuthPayload!
}

# type Subscription {
  
# }

type AuthPayload {
  token: String!
  user: User!
}

type User {
  id: ID!
  login: String!
  role: Role!
  name: String!
}

type Host {
  id: ID!
  hostName: String!
  owner: User
  publicKey: String
  tunnelPort: Int
  timeZone: String
}